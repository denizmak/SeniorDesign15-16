#Created by Deni Zmak
#SE 450 - Senior Design Project, BEHI 2.0
#October 17, 2015


#-------------------CREATE TABLE QUERIES -----------------

CREATE TABLE Account (
	username VARCHAR(11) PRIMARY KEY, 
	password VARCHAR(55) NOT NULL,
	type INT NOT NULL);


CREATE TABLE Student (
	studentID CHAR(7) PRIMARY KEY, 
	firstName VARCHAR(22) NOT NULL, 
	lastName VARCHAR(22) NOT NULL, 
	email VARCHAR(22) UNIQUE, 
	username VARCHAR(11),
	FOREIGN KEY (username) REFERENCES Account (username) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE Instructor (
	instructorID CHAR(7) PRIMARY KEY, 
	firstName VARCHAR(22) NOT NULL, 
	lastName VARCHAR(22) NOT NULL, 
	email VARCHAR(22) UNIQUE,
	username VARCHAR(11) UNIQUE,
	FOREIGN KEY (username) REFERENCES Account (username) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE ProgramCoordinator (
	instructorID CHAR(7) PRIMARY KEY,
	isBEHI VARCHAR(11),
	program VARCHAR(22) NOT NULL,
	FOREIGN KEY (instructorID) REFERENCES Instructor (instructorID) ON DELETE CASCADE ON UPDATE CASCADE);
					
						
CREATE TABLE Advises (
	studentID CHAR(7),
	instructorID CHAR(7),
	type VARCHAR(9) NOT NULL,		
	PRIMARY KEY (studentID, instructorID),
	FOREIGN KEY (studentID) REFERENCES Student (studentID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (instructorID) REFERENCES Instructor (instructorID) ON DELETE CASCADE ON UPDATE CASCADE);	


CREATE TABLE Course (
	courseID VARCHAR(11) PRIMARY KEY, 
	fullName VARCHAR(55), 
	credits INT NOT NULL,				
	fallTerm BOOLEAN, 			
	springTerm BOOLEAN,			
	summerA BOOLEAN,
	summerB BOOLEAN,
	summerC BOOLEAN);		


CREATE TABLE CourseOfferings (
	courseID VARCHAR(11), 
	term VARCHAR(4) NOT NULL, 		
	section INT NOT NULL, 					
	instructorID CHAR(7),
	courseNumber VARCHAR(5), 		
	lectureDays CHAR(5), 
	startime VARCHAR(5), 				
	endTime VARCHAR(5),			
	classroom VARCHAR(7),			
	PRIMARY KEY (courseID, section, term),
	FOREIGN KEY (courseID) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (instructorID) REFERENCES Instructor (instructorID) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE Teaches (
	courseID VARCHAR(11), 
	term VARCHAR(4),
	section INT,				
	instructorID CHAR(7),
	PRIMARY KEY (courseID, term, section),
	FOREIGN KEY (courseID) REFERENCES CourseOffering (courseID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (instructorID) REFERENCES Instructor (instructorID) ON DELETE CASCADE ON UPDATE CASCADE); 


CREATE TABLE Program (
	programID VARCHAR(11) PRIMARY KEY, 	
	fullName VARCHAR(55),		
	totalCredits INT NOT NULL, 			
	type VARCHAR(5) NOT NULL, 		
	level VARCHAR(11) NOT NULL);	

						
CREATE TABLE HasCourse (
	programID VARCHAR(11),
	courseID VARCHAR(11),
	PRIMARY KEY (courseID, programID),
	FOREIGN KEY (programID) REFERENCES Program (programID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (courseID) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE);	

	
CREATE TABLE EnrolledCourses (
	studentID CHAR(7), 
	courseID VARCHAR(11),
	section INT,	
	term VARCHAR(4),
	PRIMARY KEY (studentID, courseID, term),
	FOREIGN KEY (studentID) REFERENCES Student (studentID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (courseID) REFERENCES CourseOffering (courseID) ON DELETE CASCADE ON UPDATE CASCADE); 


CREATE TABLE Availability (
	instructorID CHAR(11),
	term VARCHAR(4), 		
	assignedLoad INT,
	maxLoad INT NOT NULL,		
	PRIMARY KEY (instructorID, term),
	FOREIGN KEY (instructorID) REFERENCES Instructor (instructorID) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE StudentSchedule (
	studentID CHAR(7),
	courseID VARCHAR(11),
	term VARCHAR(4),
	grade CHAR(1), 
	status INT,
	PRIMARY KEY (studentID, courseID, term),
	FOREIGN KEY (studentID) REFERENCES Student (studentID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (courseID) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE HasMajor (
	studentID CHAR(7),
	programID VARCHAR(11),
	PRIMARY KEY (studentID, programID),
	FOREIGN KEY (studentID) REFERENCES Student (studentID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (programID) REFERENCES Program (programID) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE HasMinor (
	studentID CHAR(7),
	programID VARCHAR(11),
	PRIMARY KEY (studentID, programID),
	FOREIGN KEY (studentID) REFERENCES Student (studentID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (programID) REFERENCES Program (programID) ON DELETE CASCADE ON UPDATE CASCADE);


CREATE TABLE CoRequisites (
	courseID VARCHAR(11),
	coReqCourse VARCHAR(11),
	coReqNumber INT NOT NULL,
	PRIMARY KEY (courseID, coReqCourse),
	FOREIGN KEY (courseID) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (coReqCourse) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE);
	
	
CREATE TABLE PreRequisites (
	courseID VARCHAR(11),
	preReqCourse VARCHAR(11),
	preReqNumber INT NOT NULL,
	PRIMARY KEY (courseID, preReqCourse),
	FOREIGN KEY (courseID) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (preReqCourse) REFERENCES Course (courseID) ON DELETE CASCADE ON UPDATE CASCADE);




